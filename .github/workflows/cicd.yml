name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - feature/setting-azure-infrastructure

permissions:
  id-token: write
  contents: read

jobs:
  setup-infra:
    runs-on: ubuntu-latest
    outputs:
      acr_name: ${{ steps.terraform-outputs.outputs.acr_name }}
      acr_login_server: ${{ steps.terraform-outputs.outputs.acr_login_server }}
      acr_admin_username: ${{ steps.terraform-outputs.outputs.acr_admin_username }}
      acr_admin_password: ${{ steps.terraform-outputs.outputs.acr_admin_password }}

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd infra/terraform
          terraform init

      # Check if resources already exist
      - name: Check if infrastructure exists
        id: check-infrastructure
        run: |
          # Check if resource group exists
          RG_EXISTS=$(az group exists --name ${{ secrets.TF_VAR_resource_group_name }})

          # If resource group doesn't exist, this is first deployment
          if [ "$RG_EXISTS" = "false" ]; then
            echo "First deployment - will create infrastructure"
            echo "create_infrastructure=true" >> $GITHUB_OUTPUT
          else
            echo "Resource group already exists - will reuse infrastructure"
            echo "create_infrastructure=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if App Service Plan exists
        id: check-app-service-plan
        run: |
          APP_NAME="${{ secrets.TF_VAR_APP_NAME || 'glucose-monitor' }}"
          APP_SERVICE_PLAN_NAME="${APP_NAME}-plan"
          RG_NAME="${{ secrets.TF_VAR_resource_group_name }}"

          # Check if App Service Plan exists
          APP_PLAN_EXISTS=$(az appservice plan show --name $APP_SERVICE_PLAN_NAME --resource-group $RG_NAME --query name 2>/dev/null || echo "NotFound")

          if [ "$APP_PLAN_EXISTS" = "NotFound" ]; then
            echo "App Service Plan does not exist - will create"
            echo "app_service_plan_exists=false" >> $GITHUB_OUTPUT
          else
            echo "App Service Plan already exists - will reuse"
            echo "app_service_plan_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve
        env:
          TF_VAR_resource_group_name: ${{ secrets.TF_VAR_resource_group_name }}
          TF_VAR_acr_name: ${{ secrets.TF_VAR_acr_name }}
          TF_VAR_location: ${{ secrets.TF_VAR_location }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_app_name: ${{ secrets.TF_VAR_APP_NAME || 'glucose-monitor' }}
          TF_VAR_create_infrastructure: ${{ steps.check-infrastructure.outputs.create_infrastructure }}
          TF_VAR_app_service_exists: ${{ steps.check-app-service.outputs.app_service_exists || 'false' }}
          TF_VAR_app_service_plan_exists: ${{ steps.check-app-service-plan.outputs.app_service_plan_exists || 'false' }}

      # Get ACR info directly from Azure CLI
      - name: Get ACR Information
        id: get-acr-info
        run: |
          # Get ACR information directly from Azure CLI
          ACR_NAME="${{ secrets.TF_VAR_acr_name }}"

          # Verify ACR exists
          ACR_EXISTS=$(az acr check-name --name $ACR_NAME --query "nameAvailable" --output tsv)

          if [ "$ACR_EXISTS" = "false" ]; then
            echo "ACR exists - getting details"
            ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group ${{ secrets.TF_VAR_resource_group_name }} --query "loginServer" --output tsv)
            ACR_ADMIN_USERNAME=$(az acr credential show --name $ACR_NAME --resource-group ${{ secrets.TF_VAR_resource_group_name }} --query "username" --output tsv)
            ACR_ADMIN_PASSWORD=$(az acr credential show --name $ACR_NAME --resource-group ${{ secrets.TF_VAR_resource_group_name }} --query "passwords[0].value" --output tsv)

            echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
            echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
            echo "acr_admin_username=$ACR_ADMIN_USERNAME" >> $GITHUB_OUTPUT
            echo "acr_admin_password=$ACR_ADMIN_PASSWORD" >> $GITHUB_OUTPUT
            echo "Retrieved ACR info from Azure CLI"
          else
            echo "Error: ACR not found"
            exit 1
          fi

  build-and-deploy:
    needs: setup-infra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Get ACR info and set it as a variable
      - name: Get ACR Information
        id: acr-info
        run: |
          ACR_NAME="${{ secrets.TF_VAR_acr_name }}"
          RG_NAME="${{ secrets.TF_VAR_resource_group_name }}"

          # Get ACR login server
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group $RG_NAME --query "loginServer" --output tsv)
          echo "ACR Login Server: $ACR_LOGIN_SERVER"

          # Set output variable
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT

      # Directly login to ACR using Azure CLI
      - name: Log in to ACR using Azure CLI
        run: |
          ACR_NAME="${{ secrets.TF_VAR_acr_name }}"

          # Login to ACR using Azure CLI
          echo "Logging in to ACR using Azure CLI..."
          az acr login --name $ACR_NAME

      - name: Build and Push API Docker Image
        run: |
          # Build the image with correct naming
          docker build -t ${{ steps.acr-info.outputs.acr_login_server }}/glucose-monitor-api:${{ github.sha }} -f Dockerfile .

          # Also tag as latest
          docker tag ${{ steps.acr-info.outputs.acr_login_server }}/glucose-monitor-api:${{ github.sha }} ${{ steps.acr-info.outputs.acr_login_server }}/glucose-monitor-api:latest

          # Push both tags
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/glucose-monitor-api:${{ github.sha }}
          docker push ${{ steps.acr-info.outputs.acr_login_server }}/glucose-monitor-api:latest

      # Deploy the Docker image to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ needs.setup-infra.outputs.app_service_name || format('{0}-api', secrets.TF_VAR_APP_NAME || 'glucose-monitor') }}
          resource-group-name: ${{ secrets.TF_VAR_resource_group_name }}
          images: ${{ steps.acr-info.outputs.acr_login_server }}/glucose-monitor-api:${{ github.sha }}