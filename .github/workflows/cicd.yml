name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - feature/setting-azure-infrastructure
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  setup-infra:
    runs-on: ubuntu-latest
    outputs:
      acr_name: ${{ steps.terraform-outputs.outputs.acr_name }}
      acr_login_server: ${{ steps.terraform-outputs.outputs.acr_login_server }}
      acr_admin_username: ${{ steps.terraform-outputs.outputs.acr_admin_username }}
      acr_admin_password: ${{ steps.terraform-outputs.outputs.acr_admin_password }}

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd infra/terraform
          terraform init

      # Check if resources already exist
      - name: Check if infrastructure exists
        id: check-infrastructure
        run: |
          # Check if resource group exists
          RG_EXISTS=$(az group exists --name ${{ secrets.TF_VAR_resource_group_name }})

          # If resource group doesn't exist, this is first deployment
          if [ "$RG_EXISTS" = "false" ]; then
            echo "First deployment - will create infrastructure"
            echo "create_infrastructure=true" >> $GITHUB_OUTPUT
          else
            echo "Resource group already exists - will reuse infrastructure"
            echo "create_infrastructure=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve
        env:
          TF_VAR_resource_group_name: ${{ secrets.TF_VAR_resource_group_name }}
          TF_VAR_acr_name: ${{ secrets.TF_VAR_acr_name }}
          TF_VAR_location: ${{ secrets.TF_VAR_location }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_create_infrastructure: ${{ steps.check-infrastructure.outputs.create_infrastructure }}

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          cd infra/terraform
          echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "acr_admin_username=$(terraform output -raw acr_admin_username)" >> $GITHUB_OUTPUT
          echo "acr_admin_password=$(terraform output -raw acr_admin_password)" >> $GITHUB_OUTPUT

  build-and-deploy:
    needs: setup-infra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Docker Login to ACR
        uses: azure/docker-login@v1
        with:
          login-server: ${{ needs.setup-infra.outputs.acr_login_server }}
          username: ${{ needs.setup-infra.outputs.acr_admin_username }}
          password: ${{ needs.setup-infra.outputs.acr_admin_password }}

      - name: Build and Push API Docker Image
        run: |
          docker build -t ${{ needs.setup-infra.outputs.acr_login_server }}/glucose-monitor-api:${{ github.sha }} -f src/api/Dockerfile .
          docker push ${{ needs.setup-infra.outputs.acr_login_server }}/glucose-monitor-api:${{ github.sha }}