name: Deploy Infrastructure and Application

on:
  push:
    branches:
      - feature/setting-azure-infrastructure
  pull_request:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  setup-infra:
    runs-on: ubuntu-latest
    outputs:
      acr_name: ${{ steps.terraform-outputs.outputs.acr_name }}
      acr_login_server: ${{ steps.terraform-outputs.outputs.acr_login_server }}
      acr_admin_username: ${{ steps.terraform-outputs.outputs.acr_admin_username }}
      acr_admin_password: ${{ steps.terraform-outputs.outputs.acr_admin_password }}

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: |
          cd infra/terraform
          terraform init

      # Check if resources already exist
      - name: Check if infrastructure exists
        id: check-infrastructure
        run: |
          # Check if resource group exists
          RG_EXISTS=$(az group exists --name ${{ secrets.TF_VAR_resource_group_name }})

          # If resource group doesn't exist, this is first deployment
          if [ "$RG_EXISTS" = "false" ]; then
            echo "First deployment - will create infrastructure"
            echo "create_infrastructure=true" >> $GITHUB_OUTPUT
          else
            echo "Resource group already exists - will reuse infrastructure"
            echo "create_infrastructure=false" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform apply -auto-approve
        env:
          TF_VAR_resource_group_name: ${{ secrets.TF_VAR_resource_group_name }}
          TF_VAR_acr_name: ${{ secrets.TF_VAR_acr_name }}
          TF_VAR_location: ${{ secrets.TF_VAR_location }}
          TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_create_infrastructure: ${{ steps.check-infrastructure.outputs.create_infrastructure }}

      # Get ACR info directly from Azure CLI as a fallback
      - name: Get ACR Information
        id: get-acr-info
        run: |
          # Get ACR information directly from Azure CLI
          ACR_NAME="${{ secrets.TF_VAR_acr_name }}"

          # Verify ACR exists
          ACR_EXISTS=$(az acr check-name --name $ACR_NAME --query "nameAvailable" --output tsv)

          if [ "$ACR_EXISTS" = "false" ]; then
            echo "ACR exists - getting details"
            ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group ${{ secrets.TF_VAR_resource_group_name }} --query "loginServer" --output tsv)
            ACR_ADMIN_USERNAME=$(az acr credential show --name $ACR_NAME --resource-group ${{ secrets.TF_VAR_resource_group_name }} --query "username" --output tsv)
            ACR_ADMIN_PASSWORD=$(az acr credential show --name $ACR_NAME --resource-group ${{ secrets.TF_VAR_resource_group_name }} --query "passwords[0].value" --output tsv)

            echo "acr_name=$ACR_NAME" >> $GITHUB_OUTPUT
            echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
            echo "acr_admin_username=$ACR_ADMIN_USERNAME" >> $GITHUB_OUTPUT
            echo "acr_admin_password=$ACR_ADMIN_PASSWORD" >> $GITHUB_OUTPUT
            echo "Retrieved ACR info from Azure CLI"
          else
            echo "Error: ACR not found"
            exit 1
          fi

  build-and-deploy:
    needs: setup-infra
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Alternative direct approach
      - name: Get ACR Credentials Directly
        id: get-direct-creds
        run: |
          ACR_NAME="${{ secrets.TF_VAR_acr_name }}"
          RG_NAME="${{ secrets.TF_VAR_resource_group_name }}"

          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group $RG_NAME --query "loginServer" --output tsv)
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --resource-group $RG_NAME --query "username" --output tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --resource-group $RG_NAME --query "passwords[0].value" --output tsv)

          echo "login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_ENV

      - name: Docker Login to ACR using Direct Credentials
        uses: azure/docker-login@v1
        with:
          login-server: ${{ steps.get-direct-creds.outputs.login_server }}
          username: ${{ steps.get-direct-creds.outputs.username }}
          password: ${{ env.password }}

      - name: Build and Push API Docker Image
        run: |
          docker build -t ${{ steps.get-direct-creds.outputs.login_server }}/glucose-monitor-api:${{ github.sha }} -f src/api/Dockerfile ./src/api
          docker push ${{ steps.get-direct-creds.outputs.login_server }}/glucose-monitor-api:${{ github.sha }}